#ifndef _PUT_GET_BIN_
#define _PUT_GET_BIN_

#include <string>
#include <vector>

class CSampleIDWeight; 

using namespace std; 

class CPutGetBin					 
{
protected: 
	int suffix;  
	int id; 
	unsigned int nDumpFile;			// total number of samples generated by far 
	size_t capacity; 			// capacity of this bin for put and get;
	unsigned int nPutUsed; 			// available space for put (will be reset as capacity after each dump, and will decrease as a sample is depoisited)
	unsigned int nGetUsed; 			// available data for get (will be reset as capacity after each fetch, and will decrease as a sample is drawn)	
	string filename_prefix; 		// run_id.bin_id.index (index = nSampleGeneratedByFar/capacity); 
	vector <CSampleIDWeight> dataPut; 	// space for put
	vector <CSampleIDWeight> dataGet; 	// data for get 

	string GetFileNameForDump() const; 
	vector <string > GetFileNameForFetch() const; 
	vector <string > GetFileNameForConsolidate() const; 
	bool Dump(const string & =string()); 			// dump the current materials to file;
	bool Fetch(const vector<string> &); 
 	bool ReadFromOneFile(const string &, int &, const vector<unsigned int> &index);
	vector <CSampleIDWeight> ReadSampleFromFile(const string & ) const;  

	unsigned int NumberRecord(const string &) const; 
	bool LoadLeastWeightSample(const string &, CSampleIDWeight &) const; 
	bool LoadMostWeightSample(const string &, CSampleIDWeight &) const; 
public: 
	CPutGetBin(int _id=0, unsigned int _nDumpFile=0, size_t _capacity=0, string _grandPrefix=string(), int _suffix=0); 
	CPutGetBin(const CPutGetBin &); 
	CPutGetBin & operator=(const CPutGetBin &); 
	~CPutGetBin();

	void SetBinID(int _id, int _suffix=0) { id = _id; suffix=_suffix; }
	int GetBinID() const { return id; }

	// void SetNumberSamplesGeneratedByFar(int _nTotalSamples) { nSamplesGeneratedByFar = _nTotalSamples; }
	// int GetNumberSamplesGeneratedByFar() const { return nDumpFile*capacityPut+nPutUsed; }

	void SetCapacity (size_t _capacity) { capacity = _capacity; }
	int GetCapacity() const { return capacity; }
	
	size_t GetNumberFileForFetch() const; 
	size_t GetNumberFileForDump() const; 
	size_t GetNumberFileForConsolidate() const; 
	
	void SetFileNamePrefix(const string &_grandPrefix) { filename_prefix = _grandPrefix; } 
	string GetFileNamePrefix() const { return filename_prefix;}	

	unsigned int DepositSample(const CSampleIDWeight &); 

	bool DrawLeastWeightSample(CSampleIDWeight &) const;  
	bool DrawMostWeightSample(CSampleIDWeight &) const; 
	bool DrawSample(CSampleIDWeight &); 

	void finalize(); 	// save unsaved data
	void consolidate(); 	// conslidate partial sample files into complete sample files
	void restore();	// load data from a partial file
	void RestoreForFetch(); // load data from a partial file but will not update it later. This is used for single-thread mpi version so that for each level it will load partial files for its higher level for ee draw later
	bool empty() const; 

	/* for reassigning samples into different bins */ 
	void DisregardHistorySamples(); 
	void ClearDepositDrawHistory(); 

	/* to get the number of records in this bin */
	size_t GetTotalNumberRecord() const; 
}; 

#endif
