fprintf(fptr_output, "\n\n%%************ Final individual parameters for Matlab programs ************\n");
fprintf(fptr_output, "\n%%--- Rre-fixed parameter values ---\n");
fprintf(fptr_output, "Iql = %.9g;\n", finalpars_ps->Iql);
fprintf(fptr_output, "Iqk = %.9g;\n", finalpars_ps->Iqk);
fprintf(fptr_output, "gthetaK = %.9g;\n", finalpars_ps->gthetaK);
if ((dsgemodel_ps->indx_hard_restrict != 5) && (dsgemodel_ps->indx_hard_restrict != 105) &&
    (dsgemodel_ps->indx_hard_restrict != 205))
   fprintf(fptr_output, "R = %.9g;\n", finalpars_ps->R);
if ((dsgemodel_ps->indx_hard_restrict == 103) || (dsgemodel_ps->indx_hard_restrict == 105) ||
    (dsgemodel_ps->indx_hard_restrict == 203) || (dsgemodel_ps->indx_hard_restrict == 205))
   fprintf(fptr_output, "gtheta   = %.9g;\n", finalpars_ps->gtheta   );
else if (dsgemodel_ps->indx_hard_restrict == 207)
{
   fprintf(fptr_output, "gtheta   = %.9g;\n", finalpars_ps->gtheta   );
   fprintf(fptr_output, "glambdaq =    %.9g;\n", finalpars_ps->glambdaq);
   fprintf(fptr_output, "glambdastar = %.9g;\n", finalpars_ps->glambdastar);
}
else
   fprintf(fptr_output, "by = %.9g;\n", finalpars_ps->by);
fprintf(fptr_output, "ky = %.9g;\n", finalpars_ps->ky);
fprintf(fptr_output, "ik = %.9g;\n", finalpars_ps->ik);
fprintf(fptr_output, "qlLeOY = %.9g;\n", finalpars_ps->qlLeOY);
fprintf(fptr_output, "qlLhOY = %.9g;\n", finalpars_ps->qlLhOY);
fprintf(fptr_output, "nbar = %.9g;\n", finalpars_ps->nbar);
if (dsgemodel_ps->indx_hard_restrict==1)
{
   fprintf(fptr_output, "glambdastar = %.9g;\n", finalpars_ps->glambdastar);
   fprintf(fptr_output, "geta =        %.9g;\n", finalpars_ps->geta);
}
else if (dsgemodel_ps->indx_hard_restrict==2)
{
   fprintf(fptr_output, "gbeta = %.9g;\n", finalpars_ps->gbeta);
}
else if (dsgemodel_ps->indx_hard_restrict==3 || dsgemodel_ps->indx_hard_restrict==5 ||
         dsgemodel_ps->indx_hard_restrict==103 || dsgemodel_ps->indx_hard_restrict==105 ||
         dsgemodel_ps->indx_hard_restrict==203 || dsgemodel_ps->indx_hard_restrict==205 ||
         dsgemodel_ps->indx_hard_restrict==207 )
{
   fprintf(fptr_output, "galpha = %.9g;\n", finalpars_ps->galpha);
   fprintf(fptr_output, "geta = %.9g;\n", finalpars_ps->geta);
}
else if (dsgemodel_ps->indx_hard_restrict==4)
{
   fprintf(fptr_output, "galpha = %.9g;\n", finalpars_ps->galpha);
   fprintf(fptr_output, "glambdastar = %.9g;\n", finalpars_ps->glambdastar);
   fprintf(fptr_output, "geta =        %.9g;\n", finalpars_ps->geta);
}

fprintf(fptr_output, "\n%%--- Deep parameters ---\n");
if (dsgemodel_ps->indx_hard_restrict<=2)
   fprintf(fptr_output, "gbeta =       %.9g;\n", finalpars_ps->gbeta);
if (dsgemodel_ps->indx_hard_restrict != 207)
   fprintf(fptr_output, "glambdaq =    %.9g;\n", finalpars_ps->glambdaq);
if (dsgemodel_ps->indx_hard_restrict==0 || dsgemodel_ps->indx_hard_restrict==2 ||
    dsgemodel_ps->indx_hard_restrict==3 || dsgemodel_ps->indx_hard_restrict==5 ||
    dsgemodel_ps->indx_hard_restrict==103 || dsgemodel_ps->indx_hard_restrict==105 ||
    dsgemodel_ps->indx_hard_restrict==203 || dsgemodel_ps->indx_hard_restrict==205)
   fprintf(fptr_output, "glambdastar = %.9g;\n", finalpars_ps->glambdastar);
fprintf(fptr_output, "ggammah =     %.9g;\n", finalpars_ps->ggammah);
fprintf(fptr_output, "ggammae =     %.9g;\n", finalpars_ps->ggammae);
if (dsgemodel_ps->indx_hard_restrict==0 || dsgemodel_ps->indx_hard_restrict==2 || dsgemodel_ps->indx_hard_restrict==4)
   fprintf(fptr_output, "geta =        %.9g;\n", finalpars_ps->geta);
fprintf(fptr_output, "gOmega =      %.9g;\n", finalpars_ps->gOmega);
if ((dsgemodel_ps->indx_hard_restrict==5) || (dsgemodel_ps->indx_hard_restrict==105) || (dsgemodel_ps->indx_hard_restrict==205))
   fprintf(fptr_output, "R = %.9g;\n", finalpars_ps->R);

fprintf(fptr_output, "\n%%--- Other (derived) deep parameters ---\n");
fprintf(fptr_output, "glambdaK = %.9g;\n", finalpars_ps->glambdaK );
if ((dsgemodel_ps->indx_hard_restrict == 103) || (dsgemodel_ps->indx_hard_restrict == 105) ||
    (dsgemodel_ps->indx_hard_restrict == 203) || (dsgemodel_ps->indx_hard_restrict == 205) ||
    (dsgemodel_ps->indx_hard_restrict == 207) )
   fprintf(fptr_output, "by = %.9g;\n", finalpars_ps->by);
else
   fprintf(fptr_output, "gtheta   = %.9g;\n", finalpars_ps->gtheta   );
fprintf(fptr_output, "gdelta   = %.9g;\n", finalpars_ps->gdelta   );
fprintf(fptr_output, "iy       = %.9g;\n", finalpars_ps->iy       );
fprintf(fptr_output, "ChOY     = %.9g;\n", finalpars_ps->ChOY     );
fprintf(fptr_output, "CeOY     = %.9g;\n", finalpars_ps->CeOY     );
fprintf(fptr_output, "gvarphi  = %.9g;\n", finalpars_ps->gvarphi  );
if (dsgemodel_ps->indx_hard_restrict==4 ||
    dsgemodel_ps->indx_hard_restrict==3 || dsgemodel_ps->indx_hard_restrict==103 || dsgemodel_ps->indx_hard_restrict==203 ||
    dsgemodel_ps->indx_hard_restrict==5 || dsgemodel_ps->indx_hard_restrict==105 || dsgemodel_ps->indx_hard_restrict==205 ||
    dsgemodel_ps->indx_hard_restrict==207 )
   fprintf(fptr_output, "gbeta =       %.9g;\n", finalpars_ps->gbeta);
else
   fprintf(fptr_output, "galpha   = %.9g;\n", finalpars_ps->galpha   );
fprintf(fptr_output, "glambdaa = %.9g;\n", finalpars_ps->glambdaa );
fprintf(fptr_output, "gphi     = %.9g;\n", finalpars_ps->gphi     );
fprintf(fptr_output, "glambdaz = %.9g;\n", finalpars_ps->glambdaz );


fprintf(fptr_output, "\n%%--- Other derived parameters ---\n");
fprintf(fptr_output, "gmuboe  = %.9g;\n", finalpars_ps->gmuboe );
fprintf(fptr_output, "qlLeOB  = %.9g;\n", finalpars_ps->qlLeOB );
fprintf(fptr_output, "LhOLe   = %.9g;\n", finalpars_ps->LhOLe  );
fprintf(fptr_output, "Le      = %.9g;\n", finalpars_ps->Le     );
fprintf(fptr_output, "Lh      = %.9g;\n", finalpars_ps->Lh     );
fprintf(fptr_output, "gOmegah = %.9g;\n", finalpars_ps->gOmegah);
fprintf(fptr_output, "gOmegae = %.9g;\n", finalpars_ps->gOmegae);
fprintf(fptr_output, "InvdenTerm = %.9g;\n", finalpars_ps->InvdenTerm);
fprintf(fptr_output, "numTerm    = %.9g;\n", finalpars_ps->numTerm   );
fprintf(fptr_output, "COY        = %.9g;\n", finalpars_ps->COY       );
fprintf(fptr_output, "CeOC       = %.9g;\n", finalpars_ps->CeOC      );
fprintf(fptr_output, "ChOC       = %.9g;\n", finalpars_ps->ChOC      );
fprintf(fptr_output, "ER       = %.9g;\n", finalpars_ps->ER      );


fprintf(fptr_output, "\n%%--- TV persistence parameters ---\n");
// fprintf(fptr_output, "log_pistar = [\n");
// WriteVector_column(fptr_output, finalpars_ps->log_pistar_dv, " %.9g ");
// fprintf(fptr_output, "];\n");
for (si=0; si<n_st_coef[0]; si++)
   fprintf(fptr_output, "grhoglambdaa(%d) = %.9g;\n", si+1, finalpars_ps->grhoglambdaa_dv->v[si]);
for (si=0; si<n_st_coef[1]; si++)
   fprintf(fptr_output, "grhoglambdaz(%d) = %.9g;\n", si+1, finalpars_ps->grhoglambdaz_dv->v[si]);
for (si=0; si<n_st_coef[2]; si++)
   fprintf(fptr_output, "grhognuz(%d) = %.9g;\n", si+1, finalpars_ps->grhognuz_dv->v[si]);
for (si=0; si<n_st_coef[3]; si++)
   fprintf(fptr_output, "grhoglambdaq(%d) = %.9g;\n", si+1, finalpars_ps->grhoglambdaq_dv->v[si]);
for (si=0; si<n_st_coef[4]; si++)
   fprintf(fptr_output, "grhognuq(%d) = %.9g;\n", si+1, finalpars_ps->grhognuq_dv->v[si]);
for (si=0; si<n_st_coef[5]; si++)
   fprintf(fptr_output, "grhogvarphi(%d) = %.9g;\n", si+1, finalpars_ps->grhogvarphi_dv->v[si]);
for (si=0; si<n_st_coef[6]; si++)
   fprintf(fptr_output, "grhogpsi(%d) = %.9g;\n", si+1, finalpars_ps->grhogpsi_dv->v[si]);
for (si=0; si<n_st_coef[7]; si++)
   fprintf(fptr_output, "grhogtheta(%d) = %.9g;\n", si+1, finalpars_ps->grhogtheta_dv->v[si]);
if (dsgemodel_ps->indx_hard_restrict==103 || dsgemodel_ps->indx_hard_restrict==105)
   for (si=0; si<n_st_coef[8]; si++)
      fprintf(fptr_output, "grhogdelta(%d) = %.9g;\n", si+1, finalpars_ps->grhogdelta_dv->v[si]);
                //$$## [7] or [8] must match dw_DimA(n_st_coef) or finalpars_ps->n_tvvarpars in CreateTSfinalpars().
fprintf(fptr_output, "%%---\n");

fprintf(fptr_output, "\n%%--- Shock standard deviations ---\n");
for (si=0; si<n_st_var[0]; si++)
   fprintf(fptr_output, "gsigmaglambdaa(%d) = %.9g;\n", si+1, finalpars_ps->gsigmaglambdaa_dv->v[si]);
for (si=0; si<n_st_var[1]; si++)
   fprintf(fptr_output, "gsigmaglambdaz(%d) = %.9g;\n", si+1, finalpars_ps->gsigmaglambdaz_dv->v[si]);
for (si=0; si<n_st_var[2]; si++)
   fprintf(fptr_output, "gsigmagnuz(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagnuz_dv->v[si]);
for (si=0; si<n_st_var[3]; si++)
   fprintf(fptr_output, "gsigmaglambdaq(%d) = %.9g;\n", si+1, finalpars_ps->gsigmaglambdaq_dv->v[si]);
for (si=0; si<n_st_var[4]; si++)
   fprintf(fptr_output, "gsigmagnuq(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagnuq_dv->v[si]);
for (si=0; si<n_st_var[5]; si++)
   fprintf(fptr_output, "gsigmagvarphi(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagvarphi_dv->v[si]);
for (si=0; si<n_st_var[6]; si++)
   fprintf(fptr_output, "gsigmagpsi(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagpsi_dv->v[si]);
for (si=0; si<n_st_var[7]; si++)
   fprintf(fptr_output, "gsigmagtheta(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagtheta_dv->v[si]);
if (dsgemodel_ps->indx_hard_restrict==103 || dsgemodel_ps->indx_hard_restrict==105)
   for (si=0; si<n_st_var[8]; si++)
      fprintf(fptr_output, "gsigmagdelta(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagdelta_dv->v[si]);
                //$$## [7] must match dw_DimA(n_st_var) or finalpars_ps->n_tvvarpars in CreateTSfinalpars().
fprintf(fptr_output, "%%---\n");




fprintf(fptr_output, "\n\n%%************ Final individual parameters for papers ************\n");
fprintf(fptr_output, "\n%%--- Structural parameters: 1st set (estimated) ---\n");
if (dsgemodel_ps->indx_hard_restrict<=2)
   fprintf(fptr_output, "gbeta =       %.9g;\n", finalpars_ps->gbeta);
fprintf(fptr_output, "gamma_h =     %.9g;\n", finalpars_ps->ggammah);
fprintf(fptr_output, "gamma_e =     %.9g;\n", finalpars_ps->ggammae);
fprintf(fptr_output, "Omega =      %.9g;\n", finalpars_ps->gOmega);
if (dsgemodel_ps->indx_hard_restrict==0 || dsgemodel_ps->indx_hard_restrict==2 ||
    dsgemodel_ps->indx_hard_restrict==3 || dsgemodel_ps->indx_hard_restrict==5 ||
    dsgemodel_ps->indx_hard_restrict==103 || dsgemodel_ps->indx_hard_restrict==105 ||
    dsgemodel_ps->indx_hard_restrict==203 || dsgemodel_ps->indx_hard_restrict==205)
   fprintf(fptr_output, "100(g_{gamma}-1) =  %.9g;\n", 100*(finalpars_ps->glambdastar-1.0));
if (dsgemodel_ps->indx_hard_restrict != 207)   
   fprintf(fptr_output, "100(lambda^bar_q-1) =    %.9g;\n", 100.0*(finalpars_ps->glambdaq-1.0));
if (dsgemodel_ps->indx_hard_restrict==0 || dsgemodel_ps->indx_hard_restrict==2 || dsgemodel_ps->indx_hard_restrict==4)
   fprintf(fptr_output, "eta =        %.9g;\n", finalpars_ps->geta);
if ((dsgemodel_ps->indx_hard_restrict==5) || (dsgemodel_ps->indx_hard_restrict==105) || (dsgemodel_ps->indx_hard_restrict==205))
   fprintf(fptr_output, "R = %.9g;\n", finalpars_ps->R);


fprintf(fptr_output, "\n%%--- Structural parameters: 2nd set (derived) ---\n");
if (dsgemodel_ps->indx_hard_restrict==4 ||
    dsgemodel_ps->indx_hard_restrict==3 || dsgemodel_ps->indx_hard_restrict==103 || dsgemodel_ps->indx_hard_restrict==203 ||
    dsgemodel_ps->indx_hard_restrict==5 || dsgemodel_ps->indx_hard_restrict==105 || dsgemodel_ps->indx_hard_restrict==205 ||
    dsgemodel_ps->indx_hard_restrict==207 )
   fprintf(fptr_output, "beta =       %.9g;\n", finalpars_ps->gbeta);
else
   fprintf(fptr_output, "alpha   = %.9g;\n", finalpars_ps->galpha   );
fprintf(fptr_output, "lambda^bar_a = %.9g;\n", finalpars_ps->glambdaa );
fprintf(fptr_output, "varphi^bar  = %.9g;\n", finalpars_ps->gvarphi  );
fprintf(fptr_output, "phi     = %.9g;\n", finalpars_ps->gphi     );
fprintf(fptr_output, "delta   = %.9g;\n", finalpars_ps->gdelta   );
if (dsgemodel_ps->indx_hard_restrict==4 ||
    dsgemodel_ps->indx_hard_restrict==3 || dsgemodel_ps->indx_hard_restrict==103 || 
    dsgemodel_ps->indx_hard_restrict==5 || dsgemodel_ps->indx_hard_restrict==105 || dsgemodel_ps->indx_hard_restrict==205)
   fprintf(fptr_output, "alpha   = %.9g;\n", finalpars_ps->galpha   );
if ((dsgemodel_ps->indx_hard_restrict == 103) || (dsgemodel_ps->indx_hard_restrict == 105) || (dsgemodel_ps->indx_hard_restrict == 205))
   fprintf(fptr_output, "theta^bar   = %.9g;\n", finalpars_ps->gtheta   );


fprintf(fptr_output, "\n%%--- Structural parameters: other derived (not reported in the paper's tables) ---\n");
fprintf(fptr_output, "glambdaK = %.9g;\n", finalpars_ps->glambdaK );
if ((dsgemodel_ps->indx_hard_restrict == 103) || (dsgemodel_ps->indx_hard_restrict == 105) ||
    (dsgemodel_ps->indx_hard_restrict == 203) || (dsgemodel_ps->indx_hard_restrict == 205) ||
    (dsgemodel_ps->indx_hard_restrict == 207) )
   fprintf(fptr_output, "by = %.9g;\n", finalpars_ps->by);
else
   fprintf(fptr_output, "gtheta   = %.9g;\n", finalpars_ps->gtheta   );


fprintf(fptr_output, "\n%%--- Shock parameters: persistence ---\n");
for (si=0; si<n_st_coef[0]; si++)
   fprintf(fptr_output, "rho_a(%d) = %.9g;\n", si+1, finalpars_ps->grhoglambdaa_dv->v[si]);
for (si=0; si<n_st_coef[1]; si++)
   fprintf(fptr_output, "rho_z(%d) = %.9g;\n", si+1, finalpars_ps->grhoglambdaz_dv->v[si]);
for (si=0; si<n_st_coef[2]; si++)
   fprintf(fptr_output, "rho_{nu_z}(%d) = %.9g;\n", si+1, finalpars_ps->grhognuz_dv->v[si]);
for (si=0; si<n_st_coef[3]; si++)
   fprintf(fptr_output, "rho_q(%d) = %.9g;\n", si+1, finalpars_ps->grhoglambdaq_dv->v[si]);
for (si=0; si<n_st_coef[4]; si++)
   fprintf(fptr_output, "rho_{nu_q}(%d) = %.9g;\n", si+1, finalpars_ps->grhognuq_dv->v[si]);
for (si=0; si<n_st_coef[5]; si++)
   fprintf(fptr_output, "rho_{varphi}(%d) = %.9g;\n", si+1, finalpars_ps->grhogvarphi_dv->v[si]);
for (si=0; si<n_st_coef[6]; si++)
   fprintf(fptr_output, "rho_{psi}(%d) = %.9g;\n", si+1, finalpars_ps->grhogpsi_dv->v[si]);
for (si=0; si<n_st_coef[7]; si++)
   fprintf(fptr_output, "rho_{theta}(%d) = %.9g;\n", si+1, finalpars_ps->grhogtheta_dv->v[si]);
if (dsgemodel_ps->indx_hard_restrict==103 || dsgemodel_ps->indx_hard_restrict==105)
   for (si=0; si<n_st_coef[8]; si++)
      fprintf(fptr_output, "rho_{delta}(%d) = %.9g;\n", si+1, finalpars_ps->grhogdelta_dv->v[si]);
                //$$## [7] or [8] must match dw_DimA(n_st_coef) or finalpars_ps->n_tvvarpars in CreateTSfinalpars().
fprintf(fptr_output, "%%---\n");


fprintf(fptr_output, "\n%%--- Shock parameters: standard deviations ---\n");
for (si=0; si<n_st_var[0]; si++)
   fprintf(fptr_output, "sigma_a(%d) = %.9g;\n", si+1, finalpars_ps->gsigmaglambdaa_dv->v[si]);
for (si=0; si<n_st_var[1]; si++)
   fprintf(fptr_output, "sigma_{z}(%d) = %.9g;\n", si+1, finalpars_ps->gsigmaglambdaz_dv->v[si]);
for (si=0; si<n_st_var[2]; si++)
   fprintf(fptr_output, "sigma_{nu_z}(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagnuz_dv->v[si]);
for (si=0; si<n_st_var[3]; si++)
   fprintf(fptr_output, "sigmag_{q}(%d) = %.9g;\n", si+1, finalpars_ps->gsigmaglambdaq_dv->v[si]);
for (si=0; si<n_st_var[4]; si++)
   fprintf(fptr_output, "sigma_{nu_q}(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagnuq_dv->v[si]);
for (si=0; si<n_st_var[5]; si++)
   fprintf(fptr_output, "sigma_{varphi}(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagvarphi_dv->v[si]);
for (si=0; si<n_st_var[6]; si++)
   fprintf(fptr_output, "sigma_{psi}(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagpsi_dv->v[si]);
for (si=0; si<n_st_var[7]; si++)
   fprintf(fptr_output, "sigmag_{theta}(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagtheta_dv->v[si]);
if (dsgemodel_ps->indx_hard_restrict==103 || dsgemodel_ps->indx_hard_restrict==105)
   for (si=0; si<n_st_var[8]; si++)
      fprintf(fptr_output, "sigmag_{delta}(%d) = %.9g;\n", si+1, finalpars_ps->gsigmagdelta_dv->v[si]);
                //$$## [7] must match dw_DimA(n_st_var) or finalpars_ps->n_tvvarpars in CreateTSfinalpars().
fprintf(fptr_output, "%%---\n");
